diff '--color=auto' -uprN ./a/dwl.c ./b/dwl.c
--- ./a/dwl.c	2023-10-19 22:10:46.761538455 +0800
+++ ./b/dwl.c	2023-10-19 22:40:38.488127445 +0800
@@ -52,6 +52,8 @@
 #include <wlr/types/wlr_xdg_shell.h>
 #include <wlr/util/log.h>
 #include <xkbcommon/xkbcommon.h>
+#include <wlr/types/wlr_xdg_foreign_v1.h>
+#include <wlr/types/wlr_xdg_foreign_v2.h>
 #ifdef XWAYLAND
 #include <wlr/xwayland.h>
 #include <xcb/xcb.h>
@@ -59,6 +61,7 @@
 #endif
 
 #include "util.h"
+#include "wlr_foreign_toplevel_management_v1.h"
 
 /* macros */
 #define MAX(A, B)               ((A) > (B) ? (A) : (B))
@@ -126,6 +129,11 @@ typedef struct {
 	uint32_t tags;
 	int isfloating, isurgent, isfullscreen;
 	uint32_t resize; /* configure serial of a pending resize */
+	struct wl_listener foreign_activate_request;
+	struct wl_listener foreign_fullscreen_request;
+	struct wl_listener foreign_close_request;
+	struct wl_listener foreign_destroy;
+	struct wlr_foreign_toplevel_handle_v1 *foreign_toplevel; 
 } Client;
 
 typedef struct {
@@ -318,6 +326,11 @@ static Monitor *xytomon(double x, double
 static void xytonode(double x, double y, struct wlr_surface **psurface,
 		Client **pc, LayerSurface **pl, double *nx, double *ny);
 static void zoom(const Arg *arg);
+static void handle_foreign_activate_request(struct wl_listener *listener, void *data);
+static void handle_foreign_fullscreen_request(struct wl_listener *listener, void *data);
+static void handle_foreign_close_request(struct wl_listener *listener, void *data);
+static void handle_foreign_destroy(struct wl_listener *listener, void *data);
+static unsigned int get_tags_first_tag(unsigned int tags);
 
 /* variables */
 static const char broken[] = "broken";
@@ -366,6 +379,7 @@ static struct wlr_output_layout *output_
 static struct wlr_box sgeom;
 static struct wl_list mons;
 static Monitor *selmon;
+static struct wlr_foreign_toplevel_manager_v1 *foreign_toplevel_manager;
 
 /* global event handlers */
 static struct wl_listener cursor_axis = {.notify = axisnotify};
@@ -1536,6 +1550,7 @@ mapnotify(struct wl_listener *listener,
 	Client *p, *w, *c = wl_container_of(listener, c, map);
 	Monitor *m;
 	int i;
+	const char *appid,*title;
 
 	/* Create scene tree for this client and its border */
 	c->scene = wlr_scene_tree_create(layers[LyrTile]);
@@ -1592,6 +1607,27 @@ mapnotify(struct wl_listener *listener,
 	} else {
 		applyrules(c);
 	}
+
+	c->foreign_toplevel = wlr_foreign_toplevel_handle_v1_create(foreign_toplevel_manager);
+	if(c->foreign_toplevel){
+		LISTEN(&(c->foreign_toplevel->events.request_activate),
+				&c->foreign_activate_request,handle_foreign_activate_request);
+		LISTEN(&(c->foreign_toplevel->events.request_fullscreen),
+				&c->foreign_fullscreen_request,handle_foreign_fullscreen_request);
+		LISTEN(&(c->foreign_toplevel->events.request_close),
+				&c->foreign_close_request,handle_foreign_close_request);
+		LISTEN(&(c->foreign_toplevel->events.destroy),
+				&c->foreign_destroy,handle_foreign_destroy);
+    	appid = client_get_appid(c) ;
+		if(appid)
+			wlr_foreign_toplevel_handle_v1_set_app_id(c->foreign_toplevel,appid);
+    	title = client_get_title(c) ;
+		if(title)
+			wlr_foreign_toplevel_handle_v1_set_title(c->foreign_toplevel,title);
+		wlr_foreign_toplevel_handle_v1_output_enter(
+				c->foreign_toplevel, selmon->wlr_output);
+	}
+
 	printstatus();
 
 unset_fullscreen:
@@ -2134,6 +2170,7 @@ setup(void)
 {
 	int i, sig[] = {SIGCHLD, SIGINT, SIGTERM, SIGPIPE};
 	struct sigaction sa = {.sa_flags = SA_RESTART, .sa_handler = handlesig};
+	struct wlr_xdg_foreign_registry *foreign_registry;
 	sigemptyset(&sa.sa_mask);
 
 	for (i = 0; i < LENGTH(sig); i++)
@@ -2296,6 +2333,10 @@ setup(void)
 
 	wlr_scene_set_presentation(scene, wlr_presentation_create(dpy, backend));
 
+	foreign_toplevel_manager =wlr_foreign_toplevel_manager_v1_create(dpy);
+	foreign_registry = wlr_xdg_foreign_registry_create(dpy);
+	wlr_xdg_foreign_v1_create(dpy, foreign_registry);
+	wlr_xdg_foreign_v2_create(dpy, foreign_registry);
 #ifdef XWAYLAND
 	/*
 	 * Initialise the XWayland X server.
@@ -2485,6 +2526,12 @@ unmapnotify(struct wl_listener *listener
 
 	wl_list_remove(&c->commit.link);
 	wlr_scene_node_destroy(&c->scene->node);
+
+	if(c->foreign_toplevel){
+		wlr_foreign_toplevel_handle_v1_destroy(c->foreign_toplevel);
+		c->foreign_toplevel = NULL;
+	}
+
 	printstatus();
 	motionnotify(0);
 }
@@ -2580,6 +2627,10 @@ void
 updatetitle(struct wl_listener *listener, void *data)
 {
 	Client *c = wl_container_of(listener, c, set_title);
+	const char *title;
+    title = client_get_title(c) ;
+	if(title && c->foreign_toplevel)
+		wlr_foreign_toplevel_handle_v1_set_title(c->foreign_toplevel,title);
 	if (c == focustop(c->mon))
 		printstatus();
 }
@@ -2797,6 +2848,52 @@ xwaylandready(struct wl_listener *listen
 }
 #endif
 
+unsigned int
+get_tags_first_tag(unsigned int tags){
+	unsigned int i,target,tag;
+	tag = 0;
+	for(i=0;!(tag & 1);i++){
+		tag = tags >> i;
+	}
+	target = 1 << (i-1);	
+	return target;
+}
+
+void
+handle_foreign_activate_request(struct wl_listener *listener, void *data) {
+	Client *c = wl_container_of(listener, c, foreign_activate_request);
+	unsigned int target;
+	if(c) {
+		target = get_tags_first_tag(c->tags); 
+		view(&(Arg){.ui = target});
+		focusclient(c,1);
+	}
+}
+
+void
+handle_foreign_fullscreen_request(
+		struct wl_listener *listener, void *data) {
+	return;
+}
+
+void
+handle_foreign_close_request(struct wl_listener *listener, void *data) {
+	Client *c = wl_container_of(listener, c, foreign_close_request);
+	if(c)
+		client_send_close(c);
+}
+
+void
+handle_foreign_destroy(struct wl_listener *listener, void *data) {
+	Client *c = wl_container_of(listener, c, foreign_destroy);
+	if(c){
+		wl_list_remove(&c->foreign_activate_request.link);
+		wl_list_remove(&c->foreign_fullscreen_request.link);
+		wl_list_remove(&c->foreign_close_request.link);
+		wl_list_remove(&c->foreign_destroy.link);
+	}
+}
+
 int
 main(int argc, char *argv[])
 {
diff '--color=auto' -uprN ./a/wlr_foreign_toplevel_management_v1.c ./b/wlr_foreign_toplevel_management_v1.c
--- ./a/wlr_foreign_toplevel_management_v1.c	1970-01-01 08:00:00.000000000 +0800
+++ ./b/wlr_foreign_toplevel_management_v1.c	2023-10-19 22:13:12.001532163 +0800
@@ -0,0 +1,712 @@
+#define _POSIX_C_SOURCE 200809L
+
+#include <assert.h>
+#include <string.h>
+#include <stdlib.h>
+#include <wlr/types/wlr_compositor.h>
+#include <wlr/types/wlr_foreign_toplevel_management_v1.h>
+#include <wlr/types/wlr_seat.h>
+#include <wlr/util/log.h>
+#include "wlr-foreign-toplevel-management-unstable-v1-protocol.h"
+
+#define FOREIGN_TOPLEVEL_MANAGEMENT_V1_VERSION 3
+
+static const struct zwlr_foreign_toplevel_handle_v1_interface toplevel_handle_impl;
+
+static struct wlr_foreign_toplevel_handle_v1 *toplevel_handle_from_resource(
+		struct wl_resource *resource) {
+	assert(wl_resource_instance_of(resource,
+			&zwlr_foreign_toplevel_handle_v1_interface,
+			&toplevel_handle_impl));
+	return wl_resource_get_user_data(resource);
+}
+
+static void toplevel_handle_send_maximized_event(struct wl_resource *resource,
+		bool state) {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel =
+		toplevel_handle_from_resource(resource);
+	if (!toplevel) {
+		return;
+	}
+	struct wlr_foreign_toplevel_handle_v1_maximized_event event = {
+		.toplevel = toplevel,
+		.maximized = state,
+	};
+	wl_signal_emit_mutable(&toplevel->events.request_maximize, &event);
+}
+
+static void foreign_toplevel_handle_set_maximized(struct wl_client *client,
+		struct wl_resource *resource) {
+	toplevel_handle_send_maximized_event(resource, true);
+}
+
+static void foreign_toplevel_handle_unset_maximized(struct wl_client *client,
+		struct wl_resource *resource) {
+	toplevel_handle_send_maximized_event(resource, false);
+}
+
+static void toplevel_send_minimized_event(struct wl_resource *resource,
+		bool state) {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel =
+		toplevel_handle_from_resource(resource);
+	if (!toplevel) {
+		return;
+	}
+
+	struct wlr_foreign_toplevel_handle_v1_minimized_event event = {
+		.toplevel = toplevel,
+		.minimized = state,
+	};
+	wl_signal_emit_mutable(&toplevel->events.request_minimize, &event);
+}
+
+static void foreign_toplevel_handle_set_minimized(struct wl_client *client,
+		struct wl_resource *resource) {
+	toplevel_send_minimized_event(resource, true);
+}
+
+static void foreign_toplevel_handle_unset_minimized(struct wl_client *client,
+		struct wl_resource *resource) {
+	toplevel_send_minimized_event(resource, false);
+}
+
+static void toplevel_send_fullscreen_event(struct wl_resource *resource,
+		bool state, struct wl_resource *output_resource) {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel =
+		toplevel_handle_from_resource(resource);
+	if (!toplevel) {
+		return;
+	}
+
+	struct wlr_output *output = NULL;
+	if (output_resource) {
+		output = wlr_output_from_resource(output_resource);
+	}
+	struct wlr_foreign_toplevel_handle_v1_fullscreen_event event = {
+		.toplevel = toplevel,
+		.fullscreen = state,
+		.output = output,
+	};
+	wl_signal_emit_mutable(&toplevel->events.request_fullscreen, &event);
+}
+
+static void foreign_toplevel_handle_set_fullscreen(struct wl_client *client,
+		struct wl_resource *resource, struct wl_resource *output) {
+	toplevel_send_fullscreen_event(resource, true, output);
+}
+
+static void foreign_toplevel_handle_unset_fullscreen(struct wl_client *client,
+		struct wl_resource *resource) {
+	toplevel_send_fullscreen_event(resource, false, NULL);
+}
+
+static void foreign_toplevel_handle_activate(struct wl_client *client,
+		struct wl_resource *resource, struct wl_resource *seat) {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel =
+		toplevel_handle_from_resource(resource);
+	if (!toplevel) {
+		return;
+	}
+	struct wlr_seat_client *seat_client = wlr_seat_client_from_resource(seat);
+	if (!seat_client) {
+		return;
+	}
+
+	struct wlr_foreign_toplevel_handle_v1_activated_event event = {
+		.toplevel = toplevel,
+		.seat = seat_client->seat,
+	};
+	wl_signal_emit_mutable(&toplevel->events.request_activate, &event);
+}
+
+static void foreign_toplevel_handle_close(struct wl_client *client,
+		struct wl_resource *resource) {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel =
+		toplevel_handle_from_resource(resource);
+	if (!toplevel) {
+		return;
+	}
+	wl_signal_emit_mutable(&toplevel->events.request_close, toplevel);
+}
+
+static void foreign_toplevel_handle_set_rectangle(struct wl_client *client,
+		struct wl_resource *resource, struct wl_resource *surface,
+		int32_t x, int32_t y, int32_t width, int32_t height) {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel =
+		toplevel_handle_from_resource(resource);
+	if (!toplevel) {
+		return;
+	}
+
+	if (width < 0 || height < 0) {
+		wl_resource_post_error(resource,
+			ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_ERROR_INVALID_RECTANGLE,
+			"invalid rectangle passed to set_rectangle: width/height < 0");
+		return;
+	}
+
+	struct wlr_foreign_toplevel_handle_v1_set_rectangle_event event = {
+		.toplevel = toplevel,
+		.surface = wlr_surface_from_resource(surface),
+		.x = x,
+		.y = y,
+		.width = width,
+		.height = height,
+	};
+	wl_signal_emit_mutable(&toplevel->events.set_rectangle, &event);
+}
+
+static void foreign_toplevel_handle_destroy(struct wl_client *client,
+		struct wl_resource *resource) {
+	wl_resource_destroy(resource);
+}
+
+static const struct zwlr_foreign_toplevel_handle_v1_interface toplevel_handle_impl = {
+	.set_maximized = foreign_toplevel_handle_set_maximized,
+	.unset_maximized = foreign_toplevel_handle_unset_maximized,
+	.set_minimized = foreign_toplevel_handle_set_minimized,
+	.unset_minimized = foreign_toplevel_handle_unset_minimized,
+	.activate = foreign_toplevel_handle_activate,
+	.close = foreign_toplevel_handle_close,
+	.set_rectangle = foreign_toplevel_handle_set_rectangle,
+	.destroy = foreign_toplevel_handle_destroy,
+	.set_fullscreen = foreign_toplevel_handle_set_fullscreen,
+	.unset_fullscreen = foreign_toplevel_handle_unset_fullscreen,
+};
+
+static void toplevel_idle_send_done(void *data) {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel = data;
+	struct wl_resource *resource;
+	wl_resource_for_each(resource, &toplevel->resources) {
+		zwlr_foreign_toplevel_handle_v1_send_done(resource);
+	}
+
+	toplevel->idle_source = NULL;
+}
+
+static void toplevel_update_idle_source(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel) {
+	if (toplevel->idle_source) {
+		return;
+	}
+
+	toplevel->idle_source = wl_event_loop_add_idle(toplevel->manager->event_loop,
+		toplevel_idle_send_done, toplevel);
+}
+
+void wlr_foreign_toplevel_handle_v1_set_title(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel, const char *title) {
+	free(toplevel->title);
+	toplevel->title = strdup(title);
+	if (toplevel->title == NULL) {
+		wlr_log(WLR_ERROR, "failed to allocate memory for toplevel title");
+		return;
+	}
+
+	struct wl_resource *resource;
+	wl_resource_for_each(resource, &toplevel->resources) {
+		zwlr_foreign_toplevel_handle_v1_send_title(resource, title);
+	}
+
+	toplevel_update_idle_source(toplevel);
+}
+
+void wlr_foreign_toplevel_handle_v1_set_app_id(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel, const char *app_id) {
+	free(toplevel->app_id);
+	toplevel->app_id = strdup(app_id);
+	if (toplevel->app_id == NULL) {
+		wlr_log(WLR_ERROR, "failed to allocate memory for toplevel app_id");
+		return;
+	}
+
+	struct wl_resource *resource;
+	wl_resource_for_each(resource, &toplevel->resources) {
+		zwlr_foreign_toplevel_handle_v1_send_app_id(resource, app_id);
+	}
+
+	toplevel_update_idle_source(toplevel);
+}
+
+static void send_output_to_resource(struct wl_resource *resource,
+		struct wlr_output *output, bool enter) {
+	struct wl_client *client = wl_resource_get_client(resource);
+	struct wl_resource *output_resource;
+
+	wl_resource_for_each(output_resource, &output->resources) {
+		if (wl_resource_get_client(output_resource) == client) {
+			if (enter) {
+				zwlr_foreign_toplevel_handle_v1_send_output_enter(resource,
+					output_resource);
+			} else {
+				zwlr_foreign_toplevel_handle_v1_send_output_leave(resource,
+					output_resource);
+			}
+		}
+	}
+}
+
+static void toplevel_send_output(struct wlr_foreign_toplevel_handle_v1 *toplevel,
+		struct wlr_output *output, bool enter) {
+	struct wl_resource *resource;
+	wl_resource_for_each(resource, &toplevel->resources) {
+		send_output_to_resource(resource, output, enter);
+	}
+
+	toplevel_update_idle_source(toplevel);
+}
+
+static void toplevel_handle_output_bind(struct wl_listener *listener,
+		void *data) {
+	struct wlr_foreign_toplevel_handle_v1_output *toplevel_output =
+		wl_container_of(listener, toplevel_output, output_bind);
+	struct wlr_output_event_bind *event = data;
+	struct wl_client *client = wl_resource_get_client(event->resource);
+
+	struct wl_resource *resource;
+	wl_resource_for_each(resource, &toplevel_output->toplevel->resources) {
+		if (wl_resource_get_client(resource) == client) {
+			send_output_to_resource(resource, toplevel_output->output, true);
+		}
+	}
+
+	toplevel_update_idle_source(toplevel_output->toplevel);
+}
+
+static void toplevel_handle_output_destroy(struct wl_listener *listener,
+		void *data) {
+	struct wlr_foreign_toplevel_handle_v1_output *toplevel_output =
+		wl_container_of(listener, toplevel_output, output_destroy);
+	wlr_foreign_toplevel_handle_v1_output_leave(toplevel_output->toplevel,
+		toplevel_output->output);
+}
+
+void wlr_foreign_toplevel_handle_v1_output_enter(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel,
+		struct wlr_output *output) {
+	struct wlr_foreign_toplevel_handle_v1_output *toplevel_output;
+	wl_list_for_each(toplevel_output, &toplevel->outputs, link) {
+		if (toplevel_output->output == output) {
+			return; // we have already sent output_enter event
+		}
+	}
+
+	toplevel_output =
+		calloc(1, sizeof(struct wlr_foreign_toplevel_handle_v1_output));
+	if (!toplevel_output) {
+		wlr_log(WLR_ERROR, "failed to allocate memory for toplevel output");
+		return;
+	}
+
+	toplevel_output->output = output;
+	toplevel_output->toplevel = toplevel;
+	wl_list_insert(&toplevel->outputs, &toplevel_output->link);
+
+	toplevel_output->output_bind.notify = toplevel_handle_output_bind;
+	wl_signal_add(&output->events.bind, &toplevel_output->output_bind);
+
+	toplevel_output->output_destroy.notify = toplevel_handle_output_destroy;
+	wl_signal_add(&output->events.destroy, &toplevel_output->output_destroy);
+
+	toplevel_send_output(toplevel, output, true);
+}
+
+static void toplevel_output_destroy(
+		struct wlr_foreign_toplevel_handle_v1_output *toplevel_output) {
+	wl_list_remove(&toplevel_output->link);
+	wl_list_remove(&toplevel_output->output_bind.link);
+	wl_list_remove(&toplevel_output->output_destroy.link);
+	free(toplevel_output);
+}
+
+void wlr_foreign_toplevel_handle_v1_output_leave(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel,
+		struct wlr_output *output) {
+	struct wlr_foreign_toplevel_handle_v1_output *toplevel_output_iterator;
+	struct wlr_foreign_toplevel_handle_v1_output *toplevel_output = NULL;
+
+	wl_list_for_each(toplevel_output_iterator, &toplevel->outputs, link) {
+		if (toplevel_output_iterator->output == output) {
+			toplevel_output = toplevel_output_iterator;
+			break;
+		}
+	}
+
+	if (toplevel_output) {
+		toplevel_send_output(toplevel, output, false);
+		toplevel_output_destroy(toplevel_output);
+	} else {
+		// XXX: log an error? crash?
+	}
+}
+
+static bool fill_array_from_toplevel_state(struct wl_array *array,
+		uint32_t state) {
+	if (state & WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED) {
+		uint32_t *index = wl_array_add(array, sizeof(uint32_t));
+		if (index == NULL) {
+			return false;
+		}
+		*index = ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED;
+	}
+	if (state & WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED) {
+		uint32_t *index = wl_array_add(array, sizeof(uint32_t));
+		if (index == NULL) {
+			return false;
+		}
+		*index = ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED;
+	}
+	if (state & WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED) {
+		uint32_t *index = wl_array_add(array, sizeof(uint32_t));
+		if (index == NULL) {
+			return false;
+		}
+		*index = ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED;
+	}
+	if (state & WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN) {
+		uint32_t *index = wl_array_add(array, sizeof(uint32_t));
+		if (index == NULL) {
+			return false;
+		}
+		*index = ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN;
+	}
+
+	return true;
+}
+
+static void toplevel_send_state(struct wlr_foreign_toplevel_handle_v1 *toplevel) {
+	struct wl_array states;
+	wl_array_init(&states);
+	bool r = fill_array_from_toplevel_state(&states, toplevel->state);
+	if (!r) {
+		struct wl_resource *resource;
+		wl_resource_for_each(resource, &toplevel->resources) {
+			wl_resource_post_no_memory(resource);
+		}
+
+		wl_array_release(&states);
+		return;
+	}
+
+	struct wl_resource *resource;
+	wl_resource_for_each(resource, &toplevel->resources) {
+		zwlr_foreign_toplevel_handle_v1_send_state(resource, &states);
+	}
+
+	wl_array_release(&states);
+	toplevel_update_idle_source(toplevel);
+}
+
+void wlr_foreign_toplevel_handle_v1_set_maximized(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel, bool maximized) {
+	if (maximized == !!(toplevel->state &
+			WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED)) {
+		return;
+	}
+	if (maximized) {
+		toplevel->state |= WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED;
+	} else {
+		toplevel->state &= ~WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED;
+	}
+	toplevel_send_state(toplevel);
+}
+
+void wlr_foreign_toplevel_handle_v1_set_minimized(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel, bool minimized) {
+	if (minimized == !!(toplevel->state &
+			WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED)) {
+		return;
+	}
+	if (minimized) {
+		toplevel->state |= WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED;
+	} else {
+		toplevel->state &= ~WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED;
+	}
+	toplevel_send_state(toplevel);
+}
+
+void wlr_foreign_toplevel_handle_v1_set_activated(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel, bool activated) {
+	if (activated == !!(toplevel->state &
+			WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED)) {
+		return;
+	}
+	if (activated) {
+		toplevel->state |= WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED;
+	} else {
+		toplevel->state &= ~WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED;
+	}
+	toplevel_send_state(toplevel);
+}
+
+void wlr_foreign_toplevel_handle_v1_set_fullscreen(
+		struct wlr_foreign_toplevel_handle_v1 * toplevel, bool fullscreen) {
+	if (fullscreen == !!(toplevel->state &
+			WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN)) {
+		return;
+	}
+	if (fullscreen) {
+		toplevel->state |= WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN;
+	} else {
+		toplevel->state &= ~WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN;
+	}
+	toplevel_send_state(toplevel);
+}
+
+static void toplevel_resource_send_parent(
+		struct wl_resource *toplevel_resource,
+		struct wlr_foreign_toplevel_handle_v1 *parent) {
+	if (wl_resource_get_version(toplevel_resource) <
+			ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_PARENT_SINCE_VERSION) {
+		return;
+	}
+	struct wl_client *client = wl_resource_get_client(toplevel_resource);
+	struct wl_resource *parent_resource = NULL;
+	if (parent) {
+		parent_resource = wl_resource_find_for_client(&parent->resources, client);
+		if (!parent_resource) {
+			/* don't send an event if this client destroyed the parent handle */
+			return;
+		}
+	}
+	zwlr_foreign_toplevel_handle_v1_send_parent(toplevel_resource,
+		parent_resource);
+}
+
+void wlr_foreign_toplevel_handle_v1_set_parent(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel,
+		struct wlr_foreign_toplevel_handle_v1 *parent) {
+	if (parent == toplevel->parent) {
+		/* only send parent event to the clients if there was a change */
+		return;
+	}
+	struct wl_resource *toplevel_resource, *tmp;
+	wl_resource_for_each_safe(toplevel_resource, tmp, &toplevel->resources) {
+		toplevel_resource_send_parent(toplevel_resource, parent);
+	}
+	toplevel->parent = parent;
+	toplevel_update_idle_source(toplevel);
+}
+
+void wlr_foreign_toplevel_handle_v1_destroy(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel) {
+	if (!toplevel) {
+		return;
+	}
+
+	wl_signal_emit_mutable(&toplevel->events.destroy, toplevel);
+
+	struct wl_resource *resource, *tmp;
+	wl_resource_for_each_safe(resource, tmp, &toplevel->resources) {
+		zwlr_foreign_toplevel_handle_v1_send_closed(resource);
+		wl_resource_set_user_data(resource, NULL);
+		wl_list_remove(wl_resource_get_link(resource));
+		wl_list_init(wl_resource_get_link(resource));
+	}
+
+	struct wlr_foreign_toplevel_handle_v1_output *toplevel_output, *tmp2;
+	wl_list_for_each_safe(toplevel_output, tmp2, &toplevel->outputs, link) {
+		toplevel_output_destroy(toplevel_output);
+	}
+
+	if (toplevel->idle_source) {
+		wl_event_source_remove(toplevel->idle_source);
+	}
+
+	wl_list_remove(&toplevel->link);
+
+	/* need to ensure no other toplevels hold a pointer to this one as
+	 * a parent, so that a later call to foreign_toplevel_manager_bind()
+	 * will not result in a segfault */
+	struct wlr_foreign_toplevel_handle_v1 *tl, *tmp3;
+	wl_list_for_each_safe(tl, tmp3, &toplevel->manager->toplevels, link) {
+		if (tl->parent == toplevel) {
+			/* Note: we send a parent signal to all clients in this case;
+			 * the caller should first destroy the child handles if it
+			 * wishes to avoid this behavior. */
+			wlr_foreign_toplevel_handle_v1_set_parent(tl, NULL);
+		}
+	}
+
+	free(toplevel->title);
+	free(toplevel->app_id);
+	free(toplevel);
+}
+
+static void foreign_toplevel_resource_destroy(struct wl_resource *resource) {
+	wl_list_remove(wl_resource_get_link(resource));
+}
+
+static struct wl_resource *create_toplevel_resource_for_resource(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel,
+		struct wl_resource *manager_resource) {
+	struct wl_client *client = wl_resource_get_client(manager_resource);
+	struct wl_resource *resource = wl_resource_create(client,
+			&zwlr_foreign_toplevel_handle_v1_interface,
+			wl_resource_get_version(manager_resource), 0);
+	if (!resource) {
+		wl_client_post_no_memory(client);
+		return NULL;
+	}
+
+	wl_resource_set_implementation(resource, &toplevel_handle_impl, toplevel,
+		foreign_toplevel_resource_destroy);
+
+	wl_list_insert(&toplevel->resources, wl_resource_get_link(resource));
+	zwlr_foreign_toplevel_manager_v1_send_toplevel(manager_resource, resource);
+	return resource;
+}
+
+struct wlr_foreign_toplevel_handle_v1 *
+wlr_foreign_toplevel_handle_v1_create(
+		struct wlr_foreign_toplevel_manager_v1 *manager) {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel = calloc(1,
+			sizeof(struct wlr_foreign_toplevel_handle_v1));
+	if (!toplevel) {
+		return NULL;
+	}
+
+	wl_list_insert(&manager->toplevels, &toplevel->link);
+	toplevel->manager = manager;
+
+	wl_list_init(&toplevel->resources);
+	wl_list_init(&toplevel->outputs);
+
+	wl_signal_init(&toplevel->events.request_maximize);
+	wl_signal_init(&toplevel->events.request_minimize);
+	wl_signal_init(&toplevel->events.request_activate);
+	wl_signal_init(&toplevel->events.request_fullscreen);
+	wl_signal_init(&toplevel->events.request_close);
+	wl_signal_init(&toplevel->events.set_rectangle);
+	wl_signal_init(&toplevel->events.destroy);
+
+	struct wl_resource *manager_resource, *tmp;
+	wl_resource_for_each_safe(manager_resource, tmp, &manager->resources) {
+		create_toplevel_resource_for_resource(toplevel, manager_resource);
+	}
+
+	return toplevel;
+}
+
+static const struct zwlr_foreign_toplevel_manager_v1_interface
+	foreign_toplevel_manager_impl;
+
+static void foreign_toplevel_manager_handle_stop(struct wl_client *client,
+		struct wl_resource *resource) {
+	assert(wl_resource_instance_of(resource,
+		&zwlr_foreign_toplevel_manager_v1_interface,
+		&foreign_toplevel_manager_impl));
+
+	zwlr_foreign_toplevel_manager_v1_send_finished(resource);
+	wl_resource_destroy(resource);
+}
+
+static const struct zwlr_foreign_toplevel_manager_v1_interface
+		foreign_toplevel_manager_impl = {
+	.stop = foreign_toplevel_manager_handle_stop
+};
+
+static void foreign_toplevel_manager_resource_destroy(
+		struct wl_resource *resource) {
+	wl_list_remove(wl_resource_get_link(resource));
+}
+
+static void toplevel_send_details_to_toplevel_resource(
+		struct wlr_foreign_toplevel_handle_v1 *toplevel,
+		struct wl_resource *resource) {
+	if (toplevel->title) {
+		zwlr_foreign_toplevel_handle_v1_send_title(resource, toplevel->title);
+	}
+	if (toplevel->app_id) {
+		zwlr_foreign_toplevel_handle_v1_send_app_id(resource, toplevel->app_id);
+	}
+
+	struct wlr_foreign_toplevel_handle_v1_output *output;
+	wl_list_for_each(output, &toplevel->outputs, link) {
+		send_output_to_resource(resource, output->output, true);
+	}
+
+	struct wl_array states;
+	wl_array_init(&states);
+	bool r = fill_array_from_toplevel_state(&states, toplevel->state);
+	if (!r) {
+		wl_resource_post_no_memory(resource);
+		wl_array_release(&states);
+		return;
+	}
+
+	zwlr_foreign_toplevel_handle_v1_send_state(resource, &states);
+	wl_array_release(&states);
+
+	toplevel_resource_send_parent(resource, toplevel->parent);
+
+	zwlr_foreign_toplevel_handle_v1_send_done(resource);
+}
+
+static void foreign_toplevel_manager_bind(struct wl_client *client, void *data,
+		uint32_t version, uint32_t id) {
+	struct wlr_foreign_toplevel_manager_v1 *manager = data;
+	struct wl_resource *resource = wl_resource_create(client,
+			&zwlr_foreign_toplevel_manager_v1_interface, version, id);
+	if (!resource) {
+		wl_client_post_no_memory(client);
+		return;
+	}
+	wl_resource_set_implementation(resource, &foreign_toplevel_manager_impl,
+			manager, foreign_toplevel_manager_resource_destroy);
+
+	wl_list_insert(&manager->resources, wl_resource_get_link(resource));
+
+	struct wlr_foreign_toplevel_handle_v1 *toplevel, *tmp;
+	/* First loop: create a handle for all toplevels for all clients.
+	 * Separation into two loops avoid the case where a child handle
+	 * is created before a parent handle, so the parent relationship
+	 * could not be sent to a client. */
+	wl_list_for_each_safe(toplevel, tmp, &manager->toplevels, link) {
+		create_toplevel_resource_for_resource(toplevel, resource);
+	}
+	/* Second loop: send details about each toplevel. */
+	wl_list_for_each_safe(toplevel, tmp, &manager->toplevels, link) {
+		struct wl_resource *toplevel_resource =
+			wl_resource_find_for_client(&toplevel->resources, client);
+		toplevel_send_details_to_toplevel_resource(toplevel,
+			toplevel_resource);
+	}
+}
+
+static void handle_display_destroy(struct wl_listener *listener, void *data) {
+	struct wlr_foreign_toplevel_manager_v1 *manager =
+		wl_container_of(listener, manager, display_destroy);
+	wl_signal_emit_mutable(&manager->events.destroy, manager);
+	wl_list_remove(&manager->display_destroy.link);
+	wl_global_destroy(manager->global);
+	free(manager);
+}
+
+struct wlr_foreign_toplevel_manager_v1 *wlr_foreign_toplevel_manager_v1_create(
+		struct wl_display *display) {
+	struct wlr_foreign_toplevel_manager_v1 *manager = calloc(1,
+			sizeof(struct wlr_foreign_toplevel_manager_v1));
+	if (!manager) {
+		return NULL;
+	}
+
+	manager->event_loop = wl_display_get_event_loop(display);
+	manager->global = wl_global_create(display,
+			&zwlr_foreign_toplevel_manager_v1_interface,
+			FOREIGN_TOPLEVEL_MANAGEMENT_V1_VERSION, manager,
+			foreign_toplevel_manager_bind);
+	if (!manager->global) {
+		free(manager);
+		return NULL;
+	}
+
+	wl_signal_init(&manager->events.destroy);
+	wl_list_init(&manager->resources);
+	wl_list_init(&manager->toplevels);
+
+	manager->display_destroy.notify = handle_display_destroy;
+	wl_display_add_destroy_listener(display, &manager->display_destroy);
+
+	return manager;
+}
diff '--color=auto' -uprN ./a/wlr_foreign_toplevel_management_v1.h ./b/wlr_foreign_toplevel_management_v1.h
--- ./a/wlr_foreign_toplevel_management_v1.h	1970-01-01 08:00:00.000000000 +0800
+++ ./b/wlr_foreign_toplevel_management_v1.h	2023-10-19 22:13:09.441532274 +0800
@@ -0,0 +1,153 @@
+/*
+ * This an unstable interface of wlroots. No guarantees are made regarding the
+ * future consistency of this API.
+ */
+#ifndef WLR_USE_UNSTABLE
+#error "Add -DWLR_USE_UNSTABLE to enable unstable wlroots features"
+#endif
+
+#ifndef WLR_TYPES_WLR_FOREIGN_TOPLEVEL_MANAGEMENT_V1_H
+#define WLR_TYPES_WLR_FOREIGN_TOPLEVEL_MANAGEMENT_V1_H
+
+#include <wayland-server-core.h>
+#include <wlr/types/wlr_output.h>
+
+struct wlr_foreign_toplevel_manager_v1 {
+	struct wl_event_loop *event_loop;
+	struct wl_global *global;
+	struct wl_list resources; // wl_resource_get_link()
+	struct wl_list toplevels; // wlr_foreign_toplevel_handle_v1.link
+
+	struct wl_listener display_destroy;
+
+	struct {
+		struct wl_signal destroy;
+	} events;
+
+	void *data;
+};
+
+enum wlr_foreign_toplevel_handle_v1_state {
+	WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED = (1 << 0),
+	WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED = (1 << 1),
+	WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED = (1 << 2),
+	WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN = (1 << 3),
+};
+
+struct wlr_foreign_toplevel_handle_v1_output {
+	struct wl_list link; // wlr_foreign_toplevel_handle_v1.outputs
+	struct wlr_output *output;
+	struct wlr_foreign_toplevel_handle_v1 *toplevel;
+
+	// private state
+
+	struct wl_listener output_bind;
+	struct wl_listener output_destroy;
+};
+
+struct wlr_foreign_toplevel_handle_v1 {
+	struct wlr_foreign_toplevel_manager_v1 *manager;
+	struct wl_list resources;
+	struct wl_list link;
+	struct wl_event_source *idle_source;
+
+	char *title;
+	char *app_id;
+	struct wlr_foreign_toplevel_handle_v1 *parent;
+	struct wl_list outputs; // wlr_foreign_toplevel_v1_output.link
+	uint32_t state; // enum wlr_foreign_toplevel_v1_state
+
+	struct {
+		// struct wlr_foreign_toplevel_handle_v1_maximized_event
+		struct wl_signal request_maximize;
+		// struct wlr_foreign_toplevel_handle_v1_minimized_event
+		struct wl_signal request_minimize;
+		// struct wlr_foreign_toplevel_handle_v1_activated_event
+		struct wl_signal request_activate;
+		// struct wlr_foreign_toplevel_handle_v1_fullscreen_event
+		struct wl_signal request_fullscreen;
+		struct wl_signal request_close;
+
+		// struct wlr_foreign_toplevel_handle_v1_set_rectangle_event
+		struct wl_signal set_rectangle;
+		struct wl_signal destroy;
+	} events;
+
+	void *data;
+};
+
+struct wlr_foreign_toplevel_handle_v1_maximized_event {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel;
+	bool maximized;
+};
+
+struct wlr_foreign_toplevel_handle_v1_minimized_event {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel;
+	bool minimized;
+};
+
+struct wlr_foreign_toplevel_handle_v1_activated_event {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel;
+	struct wlr_seat *seat;
+};
+
+struct wlr_foreign_toplevel_handle_v1_fullscreen_event {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel;
+	bool fullscreen;
+	struct wlr_output *output;
+};
+
+struct wlr_foreign_toplevel_handle_v1_set_rectangle_event {
+	struct wlr_foreign_toplevel_handle_v1 *toplevel;
+	struct wlr_surface *surface;
+	int32_t x, y, width, height;
+};
+
+struct wlr_foreign_toplevel_manager_v1 *wlr_foreign_toplevel_manager_v1_create(
+	struct wl_display *display);
+
+struct wlr_foreign_toplevel_handle_v1 *wlr_foreign_toplevel_handle_v1_create(
+	struct wlr_foreign_toplevel_manager_v1 *manager);
+/**
+ * Destroy the given toplevel handle, sending the closed event to any
+ * client. Also, if the destroyed toplevel is set as a parent of any
+ * other valid toplevel, clients still holding a handle to both are
+ * sent a parent signal with NULL parent. If this is not desired, the
+ * caller should ensure that any child toplevels are destroyed before
+ * the parent.
+ */
+void wlr_foreign_toplevel_handle_v1_destroy(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel);
+
+void wlr_foreign_toplevel_handle_v1_set_title(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel, const char *title);
+void wlr_foreign_toplevel_handle_v1_set_app_id(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel, const char *app_id);
+
+void wlr_foreign_toplevel_handle_v1_output_enter(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel, struct wlr_output *output);
+void wlr_foreign_toplevel_handle_v1_output_leave(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel, struct wlr_output *output);
+
+void wlr_foreign_toplevel_handle_v1_set_maximized(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel, bool maximized);
+void wlr_foreign_toplevel_handle_v1_set_minimized(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel, bool minimized);
+void wlr_foreign_toplevel_handle_v1_set_activated(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel, bool activated);
+void wlr_foreign_toplevel_handle_v1_set_fullscreen(
+	struct wlr_foreign_toplevel_handle_v1* toplevel, bool fullscreen);
+
+/**
+ * Set the parent of a toplevel. If the parent changed from its previous
+ * value, also sends a parent event to all clients that hold handles to
+ * both toplevel and parent (no message is sent to clients that have
+ * previously destroyed their parent handle). NULL is allowed as the
+ * parent, meaning no parent exists.
+ */
+void wlr_foreign_toplevel_handle_v1_set_parent(
+	struct wlr_foreign_toplevel_handle_v1 *toplevel,
+	struct wlr_foreign_toplevel_handle_v1 *parent);
+
+
+#endif
